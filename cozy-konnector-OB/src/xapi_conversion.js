
/*

TODO see this http://rusticisoftware.github.io/TinCanJS/ Library for statements / managing LRS and so on

TODO intégrer le xAPI statement validator dans le code

TODO si option de vérification de badge, faire la vérification avant de passer et la conversion, et inclure la vérification ?


Problèmes:
- en pratique, la spécification définie pour les openbadges **ne semble pas** respectée à la lettre. Notamment pour les attributs obligatoires ou optionnels. Irrégularité qui peut poser des problèmes quand on converti 'à la chaîne' . Notamment le type pour l'identification du recipient n'est pas systématiquement précisé (adresse email par défaut ? à check TODO)

Choix d'implémentation faits :
- actors/recipients are identified by non hashed email address which we use to retrieve badges with OB's Displayer API. We may also compute sha1 when it is hashed in ob badge
*/


//var fs = require('fs');

/*================= CONSTRUCTING XAPI JSON ====================*/

/* Possible fields in xAPI: see more details on 
	-id: badge unique identifier, provided by the LRProvider or by the LRS
	- actor : actor, objectType "Group" or "Agent"
	- verb : verb descripting the event + reference to the definition of this verb such as http://id.tincanapi.com/verb/earned
	- object : objectType may notably be "Agent"/"Group", "Activity", ...
	- result : further data to measure the completion of the achievement (score, success, completion, response, duration,...)
	- context : information about context of the achievement (registration, instructor, team, contextActivities, revision, platform, language, statement,...)
	- timestamp : date when the record was done
	- store : date when the record was stored in a LRS
	- authority : the person/entity/organisation/... asserting this statement is true
	- version : statement version number
	- attachements : important image/video, essay, certificate, ... to be joined to the statement (usageType, display, description, contentType, length, sha2, fileUrl).


Here I propose one solution for the conversion, consisting in just considering that 'earning badges' represent an activity in itself. Yet, we may also want to store the activity itself, with the badge as certification. The main problem here is that constructing the record is much more difficult and may require human intervention. For this application, the best solution would certainly be Openbadges issuers proposing an xAPI version for each of their badges.

For my conversion proposal into xAPI, I chose to keep 5 elements:
Triplet is <actor><verb><object>  <authority><timestamp><stored>
        - actor : badge recipient
        - verb : always set to 'earned'.
        - object : badge definition. objectType is "Activity"
        - authority : badge issuer
        - timestamp : badge's lastValidated value.
        - stored : timestamp of when the conversion was done and effectively stored in Cozy Cloud.
*/

function xapi_conversion (badge, email) {
  var xapi_badges_list = [];
  var file_json = JSON.parse(fs.readFileSync(sourceFile, 'utf8'));
  file_json.badges.forEach((badge) => {
    var my_xapi_badge = new xapi_badge(badge, email);
    //console.debug('new xapi badge', JSON.stringify(my_xapi_badge));
    //TODO check each JSON.stringify(my_xapi_badge) with xAPI validator
    xapi_badges_list.push(JSON.stringify(my_xapi_badge));
  });
  console.debug('xapi_badges_list', xapi_badges_list);
  fs.writeFileSync(sourceFile+'_xapi.json', xapi_badges_list, () => {console.log('badges_list written !')});
}


function xapi_badge(ob_badge, email) {

        this.id; //a uuid generated by the LRS if not by the LRProvider
        this.actor = new xapi_actor(email) ;
        this.verb = {"id": 'http://id.tincanapi.com/verb/earned', "display": {"en-US": "earned"}};
        this.object = new xapi_object(ob_badge);
        this.timestamp = ob_badge.lastValidated;
        this.stored; // handle ?
        this.authority = ob_badge.assertion.badge.issuer ;
}

function xapi_actor (actorEmail) {
        this.objectType = "Agent";
        this.name; // possibly found in ob json ?
        this.mbox = actorEmail;
        //this.mbox_sha1sum : compute sha1 from email if recipient value is hashed in ob json;
}

function xapi_object (ob_badge) {
        this.objectType = "Activity";
        this.id = ob_badge.assertion.badge.criteria;
        this.definition = new xapi_object_definition(ob_badge) ;
}

function xapi_object_definition (ob_badge) {
        this.name = ob_badge.assertion.badge.name;
        this.description = { "display" : {"en-US": ob_badge.assertion.badge.description}};
        this.extensions = {"version": ob_badge.assertion.badge.version, "image": ob_badge.imageUrl}
        
}

//module.exports.xapi_conversion = xapi_conversion;
module.exports.xapi_badge = xapi_badge;

/*================= VALIDATING JSON ACCORDING TO XAPI SPECIFICATION ===================*/



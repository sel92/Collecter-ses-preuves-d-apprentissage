

/*================= CONSTRUCTING XAPI JSON ====================*/

/* Possible fields in xAPI: see more details on 
	-id: badge unique identifier, provided by the LRProvider or by the LRS
	- actor : actor, objectType "Group" or "Agent"
	- verb : verb descripting the event + reference to the definition of this verb such as http://id.tincanapi.com/verb/earned
	- object : objectType may notably be "Agent"/"Group", "Activity", ...
	- result : further data to measure the completion of the achievement (score, success, completion, response, duration,...)
	- context : information about context of the achievement (registration, instructor, team, contextActivities, revision, platform, language, statement,...)
	- timestamp : date when the record was done
	- store : date when the record was stored in a LRS
	- authority : the person/entity/organisation/... asserting this statement is true
	- version : statement version number
	- attachements : important image/video, essay, certificate, ... to be joined to the statement (usageType, display, description, contentType, length, sha2, fileUrl).


Here I propose one solution for the conversion, consisting in just considering that 'earning badges' represent an activity in itself. Yet, we may also want to store the activity itself, with the badge as certification. The main problem here is that constructing the record is much more difficult and may require human intervention. For this application, the best solution would certainly be Openbadges issuers proposing an xAPI version for each of their badges.

For my conversion proposal into xAPI, I chose to keep 5 elements:
Triplet is <actor><verb><object>  <authority><timestamp><stored>
        - actor : badge recipient
        - verb : always set to 'earned'.
        - object : badge definition. objectType is "Activity"
        - authority : badge issuer
        - timestamp : badge's lastValidated value.
        - stored : timestamp of when the conversion was done and effectively stored in Cozy Cloud.
*/


// xapi badge construction takes initial badge in input and fills different fields from it to create an object which may next be stored as JSON.
function xapi_badge(ob_badge, email) {

        this.id; //a uuid generated by the LRS if not by the LRProvider
        this.actor = new xapi_actor(email) ;
        this.verb = {"id": 'http://id.tincanapi.com/verb/earned', "display": {"en-US": "earned"}};
        this.object = new xapi_object(ob_badge);
        this.timestamp = ob_badge.lastValidated;
        this.authority = ob_badge.assertion.badge.issuer ;
}



function xapi_actor (actorEmail) {
        this.objectType = "Agent";
        this.mbox = actorEmail;
        //this.mbox_sha1sum : compute sha1 from email if recipient value is hashed in ob json;
}

function xapi_object (ob_badge) {
        this.objectType = "Activity";
        this.id = ob_badge.assertion.badge.criteria;
        this.definition = new xapi_object_definition(ob_badge) ;
}

function xapi_object_definition (ob_badge) {
        this.name = ob_badge.assertion.badge.name;
        this.description = { "display" : {"en-US": ob_badge.assertion.badge.description}};
        this.extensions = {"version": ob_badge.assertion.badge.version, "image": ob_badge.imageUrl}
        
}


module.exports.xapi_badge = xapi_badge;



/*======== REMAINING THINGS TO BE DONE ========

- integrating xAPI statement validator to make sure format is respected
- xslt for automatically getting xAPI format from Openbadges format.
- handling hashed identity in Openbadges spec vs xAPI
- handling badge verification in xAPI ?
- Cozy cloud as LRS
    -> https://xapi.com/building-a-learning-record-store/
    -> http://rusticisoftware.github.io/TinCanJS/
*/



